// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: links.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createLink = `-- name: CreateLink :exec
INSERT INTO links (
  full_url, short_code, user_id
) VALUES (
  $1, $2, $3
)
`

type CreateLinkParams struct {
	FullUrl   string
	ShortCode pgtype.Text
	UserID    pgtype.UUID
}

func (q *Queries) CreateLink(ctx context.Context, arg CreateLinkParams) error {
	_, err := q.db.Exec(ctx, createLink, arg.FullUrl, arg.ShortCode, arg.UserID)
	return err
}

const getLinkByShortCode = `-- name: GetLinkByShortCode :one
SELECT id, short_code, full_url, user_id, created_at, click_count FROM links WHERE short_code = $1
`

func (q *Queries) GetLinkByShortCode(ctx context.Context, shortCode pgtype.Text) (Link, error) {
	row := q.db.QueryRow(ctx, getLinkByShortCode, shortCode)
	var i Link
	err := row.Scan(
		&i.ID,
		&i.ShortCode,
		&i.FullUrl,
		&i.UserID,
		&i.CreatedAt,
		&i.ClickCount,
	)
	return i, err
}

const getLinksByUser = `-- name: GetLinksByUser :many
SELECT id, short_code, full_url, user_id, created_at, click_count FROM links WHERE user_id = $1
`

func (q *Queries) GetLinksByUser(ctx context.Context, userID pgtype.UUID) ([]Link, error) {
	rows, err := q.db.Query(ctx, getLinksByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Link
	for rows.Next() {
		var i Link
		if err := rows.Scan(
			&i.ID,
			&i.ShortCode,
			&i.FullUrl,
			&i.UserID,
			&i.CreatedAt,
			&i.ClickCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateClickCount = `-- name: UpdateClickCount :exec
UPDATE links
SET click_count = click_count + 1
WHERE id = $1
`

func (q *Queries) UpdateClickCount(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, updateClickCount, id)
	return err
}

const updateLink = `-- name: UpdateLink :exec
UPDATE links
SET short_code = $1, full_url = $2
WHERE id = $3
`

type UpdateLinkParams struct {
	ShortCode pgtype.Text
	FullUrl   string
	ID        pgtype.UUID
}

func (q *Queries) UpdateLink(ctx context.Context, arg UpdateLinkParams) error {
	_, err := q.db.Exec(ctx, updateLink, arg.ShortCode, arg.FullUrl, arg.ID)
	return err
}
